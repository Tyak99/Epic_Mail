{"version":3,"sources":["../../services/messageServices.js"],"names":["userServices","UserService","MessageService","messages","id","subject","message","status","parentMessageId","senderId","receiverId","map","newMessage","Message","receivedMessages","messageId","createdOn","newReceivedMessage","ReceivedMessage","sentMessages","newSentMessage","SentMessage","data","allMessage","AllMessage","filter","toWHo","emailTo","foundUser","findUserByEmail","length","postReceivedMessage","postSentMessage","splice","allMessages"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport Message from '../models/Message';\nimport ReceivedMessage from '../models/ReceivedMessage';\nimport SentMessage from '../models/SentMessages';\nimport UserService from './userServices';\n\nconst userServices = new UserService();\n\nexport default class MessageService {\n  AllMessage() {\n    this.messages = [\n      {\n        id: 1,\n        subject: 'Hello',\n        message: 'Thanks for coming',\n        status: 'read',\n        parentMessageId: null,\n        senderId: 1,\n        receiverId: 2,\n      },\n      {\n        id: 2,\n        subject: 'Hi',\n        message: 'Thanks for going',\n        status: 'draft',\n        parentMessageId: null,\n        senderId: null,\n        receiverId: null,\n      },\n      {\n        id: 3,\n        subject: 'Hello',\n        message: 'You are welcome',\n        status: 'read',\n        parentMessageId: 1,\n        senderId: 3,\n        receiverId: 1,\n      },\n      {\n        id: 4,\n        subject: 'Howdy',\n        message: 'You good',\n        status: 'sent',\n        senderId: 3,\n        receiverId: 1,\n        parentMessageId: null,\n      },\n      {\n        id: 5,\n        subject: 'Howdy',\n        message: 'okay',\n        status: 'sent',\n        senderId: 3,\n        receiverId: 1,\n        parentMessageId: null,\n      },\n    ];\n    return this.messages.map((message) => {\n      const newMessage = new Message();\n      newMessage.id = message.id;\n      newMessage.subject = message.subject;\n      newMessage.message = message.message;\n      newMessage.status = message.status;\n      newMessage.senderId = message.senderId;\n      newMessage.receiverId = message.receiverId;\n      newMessage.parentMessageId = message.parentMessageId;\n      return newMessage;\n    });\n  }\n\n  AllReceivedMessage() {\n    this.receivedMessages = [\n      {\n        receiverId: 4,\n        messageId: 1,\n        createdOn: 1551886333846,\n      },\n    ];\n    return this.receivedMessages.map((message) => {\n      const newReceivedMessage = new ReceivedMessage();\n      newReceivedMessage.receiverId = message.receiverId;\n      newReceivedMessage.messageId = message.messageId;\n      newReceivedMessage.createdOn = message.createdOn;\n      return newReceivedMessage;\n    });\n  }\n\n  AllSentMessages() {\n    this.sentMessages = [\n      {\n        senderId: 1,\n        messageId: 1,\n        createdOn: 1551886333846,\n      },\n    ];\n    return this.sentMessages.map((message) => {\n      const newSentMessage = new SentMessage();\n      newSentMessage.receiverId = message.senderId;\n      newSentMessage.messageId = message.messageId;\n      newSentMessage.createdOn = message.createdOn;\n      return newSentMessage;\n    });\n  }\n\n  postReceivedMessage(data) {\n    const { receiverId } = data;\n    if (!receiverId) {\n      return 'error';\n    }\n    const message = new ReceivedMessage();\n    message.receiverId = data.receiverId;\n    message.messageId = data.messageId;\n    return message;\n  }\n\n  postSentMessage(data) {\n    const { senderId, messageId } = data;\n    if (!senderId) {\n      return 'error';\n    }\n    const message = new SentMessage();\n    message.senderId = senderId;\n    message.messageId = messageId;\n    return message;\n  }\n\n  getReceivedMessage() {\n    const allMessage = this.AllMessage();\n    return allMessage.filter(message => message.receiverId === 1);\n  }\n\n  getSentMessages() {\n    const allMessage = this.AllMessage();\n    return allMessage.filter(message => message.senderId === 1);\n  }\n\n  postMessage(data) {\n    const allMessage = this.AllMessage();\n    let toWHo = null;\n\n    // only go through the phase of checking for user id\n    // when emailTo is passed along the request\n    if (data.emailTo) {\n      // retrieve the email in the request body\n      const { emailTo } = data;\n      // find the user with that email\n      const foundUser = userServices.findUserByEmail(emailTo);\n      toWHo = foundUser;\n    }\n    // check if user tried to send to an email and couldnt find the user\n    if (toWHo === 'error') {\n      // if so, they should be returned an error message\n      return 'NOT FOUND';\n    }\n    // else they can proceed\n    const newMessage = new Message();\n    newMessage.id = allMessage.length + 1;\n    newMessage.subject = data.subject;\n    newMessage.message = data.message;\n    newMessage.status = toWHo === null ? 'draft' : 'sent';\n    newMessage.senderId = data.senderId || null;\n    // check if the toWho is null then sender id will be null\n    newMessage.receiverId = toWHo === null ? null : toWHo.id;\n    newMessage.parentMessageId = data.parentMessageId || null;\n\n    if (newMessage.receiverId !== null) {\n      this.postReceivedMessage({\n        receiverId: newMessage.receiverId,\n        messageId: newMessage.id,\n      });\n    }\n    if (newMessage.senderId !== null) {\n      this.postSentMessage({\n        senderId: newMessage.senderId,\n        messageId: newMessage.id,\n      });\n    }\n    return newMessage;\n  }\n\n  getMessageById(id) {\n    const message = this.AllMessage()[id - 1];\n    if (!id) {\n      return 'error';\n    }\n    if (!message) {\n      return 'error';\n    }\n    return message;\n  }\n\n  deleteMessage(id) {\n    const message = this.AllMessage()[id - 1];\n    if (!id) {\n      return 'error';\n    }\n    if (!message) {\n      return 'error';\n    }\n    this.AllMessage().splice([id - 1], 1);\n    return 'true';\n  }\n\n  getUnreadMessages() {\n    const allMessages = this.AllMessage();\n\n    return allMessages.filter(message => (message.status !== 'read') && (message.receiverId === 1));\n  }\n}\n"],"file":"messageServices.js"}