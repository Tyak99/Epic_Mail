{"version":3,"sources":["../../controllers/userControllers.js"],"names":["userServices","UserService","exports","signup","req","res","body","email","password","firstName","lastName","send","status","error","createUser","data","name","token","login","loginUser"],"mappings":";;AAAA;;AACA;;;;AAEA,IAAMA,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAEAC,OAAO,CAACC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAIvBD,GAAG,CAACE,IAJmB;AAAA,MAGzBC,KAHyB,aAGzBA,KAHyB;AAAA,MAGlBC,QAHkB,aAGlBA,QAHkB;AAAA,MAGRC,SAHQ,aAGRA,SAHQ;AAAA,MAGGC,QAHH,aAGGA,QAHH;;AAK7B,MAAIH,KAAK,KAAK,oBAAd,EAAoC;AAClC,WAAOF,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AAED,MAAI,CAACN,KAAD,IAAU,CAACC,QAAX,IAAuB,CAACC,SAAxB,IAAqC,CAACC,QAA1C,EAAoD;AAClD,WAAOL,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACDb,EAAAA,YAAY,CAACc,UAAb,CAAwBV,GAAG,CAACE,IAA5B;AACA,SAAOD,GAAG,CAACM,IAAJ,CAAS;AACdC,IAAAA,MAAM,EAAE,GADM;AAEdG,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEZ,GAAG,CAACE,IAAJ,CAASG,SADX;AAEJQ,MAAAA,KAAK,EAAE,2BAAcb,GAAG,CAACE,IAAlB;AAFH;AAFQ,GAAT,CAAP;AAOD,CA1BD;;AA4BAJ,OAAO,CAACgB,KAAR,GAAgB,UAACd,GAAD,EAAMC,GAAN,EAAc;AAAA,mBACAD,GAAG,CAACE,IADJ;AAAA,MACpBC,KADoB,cACpBA,KADoB;AAAA,MACbC,QADa,cACbA,QADa;;AAE5B,MAAI,CAACD,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,WAAOH,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACDb,EAAAA,YAAY,CAACmB,SAAb,CAAuBf,GAAG,CAACE,IAA3B;;AACA,MAAIC,KAAK,KAAK,oBAAV,IAAkCC,QAAQ,KAAK,QAAnD,EAA6D;AAC3D,WAAOH,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACD,SAAOR,GAAG,CAACM,IAAJ,CAAS;AACdC,IAAAA,MAAM,EAAE,GADM;AAEdG,IAAAA,IAAI,EAAE;AACJE,MAAAA,KAAK,EAAE,2BAAcb,GAAG,CAACE,IAAlB;AADH;AAFQ,GAAT,CAAP;AAMD,CArBD","sourcesContent":["import UserService from '../services/userServices';\nimport tokenFunction from '../utils/tokenHandler';\n\nconst userServices = new UserService();\n\nexports.signup = (req, res) => {\n  const\n    {\n      email, password, firstName, lastName,\n    } = req.body;\n  if (email === 'superuser@mail.com') {\n    return res.send({\n      status: 400,\n      error: 'Email already in use',\n    });\n  }\n\n  if (!email || !password || !firstName || !lastName) {\n    return res.send({\n      status: 400,\n      error: 'All fields must be present',\n    });\n  }\n  userServices.createUser(req.body);\n  return res.send({\n    status: 201,\n    data: {\n      name: req.body.firstName,\n      token: tokenFunction(req.body),\n    },\n  });\n};\n\nexports.login = (req, res) => {\n  const { email, password } = req.body;\n  if (!email || !password) {\n    return res.send({\n      status: 400,\n      error: 'Please input login details email and password',\n    });\n  }\n  userServices.loginUser(req.body);\n  if (email !== 'superuser@mail.com' || password !== 'secret') {\n    return res.send({\n      status: 400,\n      error: 'Invalid email or password',\n    });\n  }\n  return res.send({\n    status: 200,\n    data: {\n      token: tokenFunction(req.body),\n    },\n  });\n};\n"],"file":"userControllers.js"}