{"version":3,"sources":["../../controllers/userControllers.js"],"names":["userServices","UserService","exports","signup","req","res","body","email","password","firstName","lastName","send","status","error","createdUser","createUser","data","name","token","login","loginUser"],"mappings":";;AAAA;;AACA;;;;AAEA,IAAMA,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAEAC,OAAO,CAACC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBACoBD,GAAG,CAACE,IADxB;AAAA,MACrBC,KADqB,aACrBA,KADqB;AAAA,MACdC,QADc,aACdA,QADc;AAAA,MACJC,SADI,aACJA,SADI;AAAA,MACOC,QADP,aACOA,QADP;;AAE7B,MAAI,CAACH,KAAD,IAAU,CAACC,QAAX,IAAuB,CAACC,SAAxB,IAAqC,CAACC,QAA1C,EAAoD;AAClD,WAAOL,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACD,MAAMC,WAAW,GAAGd,YAAY,CAACe,UAAb,CAAwBX,GAAG,CAACE,IAA5B,CAApB;;AAEA,MAAIQ,WAAW,KAAK,sBAApB,EAA4C;AAC1C,WAAOT,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AAED,SAAOR,GAAG,CAACM,IAAJ,CAAS;AACdC,IAAAA,MAAM,EAAE,GADM;AAEdI,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEb,GAAG,CAACE,IAAJ,CAASG,SADX;AAEJS,MAAAA,KAAK,EAAE,2BAAcd,GAAG,CAACE,IAAlB;AAFH;AAFQ,GAAT,CAAP;AAOD,CAxBD;;AA0BAJ,OAAO,CAACiB,KAAR,GAAgB,UAACf,GAAD,EAAMC,GAAN,EAAc;AAAA,mBACAD,GAAG,CAACE,IADJ;AAAA,MACpBC,KADoB,cACpBA,KADoB;AAAA,MACbC,QADa,cACbA,QADa;;AAE5B,MAAI,CAACD,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,WAAOH,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACD,MAAMO,SAAS,GAAGpB,YAAY,CAACoB,SAAb,CAAuBhB,GAAG,CAACE,IAA3B,CAAlB;;AACA,MAAIc,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,kBAA7C,EAAiE;AAC/D,WAAOf,GAAG,CAACM,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACD,SAAOR,GAAG,CAACM,IAAJ,CAAS;AACdC,IAAAA,MAAM,EAAE,GADM;AAEdI,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEG,SAAS,CAACX,SADZ;AAEJS,MAAAA,KAAK,EAAE,2BAAcd,GAAG,CAACE,IAAlB;AAFH;AAFQ,GAAT,CAAP;AAOD,CAtBD","sourcesContent":["import UserService from '../services/userServices';\nimport tokenFunction from '../utils/tokenHandler';\n\nconst userServices = new UserService();\n\nexports.signup = (req, res) => {\n  const { email, password, firstName, lastName } = req.body;\n  if (!email || !password || !firstName || !lastName) {\n    return res.send({\n      status: 400,\n      error: 'All fields must be present',\n    });\n  }\n  const createdUser = userServices.createUser(req.body);\n\n  if (createdUser === 'EMAIL ALREADY IN USE') {\n    return res.send({\n      status: 400,\n      error: 'Email already in use',\n    });\n  }\n\n  return res.send({\n    status: 201,\n    data: {\n      name: req.body.firstName,\n      token: tokenFunction(req.body),\n    },\n  });\n};\n\nexports.login = (req, res) => {\n  const { email, password } = req.body;\n  if (!email || !password) {\n    return res.send({\n      status: 400,\n      error: 'Please input login details email and password',\n    });\n  }\n  const loginUser = userServices.loginUser(req.body);\n  if (loginUser === 'NO USER' || loginUser === 'Invalid password') {\n    return res.send({\n      status: 400,\n      error: 'Invalid email or password',\n    });\n  }\n  return res.send({\n    status: 200,\n    data: {\n      name: loginUser.firstName,\n      token: tokenFunction(req.body),\n    },\n  });\n};\n"],"file":"userControllers.js"}